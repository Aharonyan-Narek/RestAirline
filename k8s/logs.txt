az group create -g restairline-group --location eastasia
az acr create -n restairlineacr -g restairline-group -l eastasia --admin-enabled true --sku basic
az acr credential show --name restairelineacr
az aks create -g restairline-group -n restairline-cluster --dns-name-prefix restairline --generate-ssh-keys --node-count=1 --node-vm-size Standard_D2_v2
az aks get-credentials --resource-group restairline-group -n restairline-cluster

docker tag restairline:latest restairlineacr.azurecr.io/restairline:v1
docker login restairlineacr.azurecr.io
docker push restairlineacr.azurecr.io/restairline:v1
kubectl version
kubectl cluster-info
kubectl create secret docker-registry registry-key --docker-server=restairlineacr.azurecr.io --docker-username=restairlineacr --docker-password=eJkIitE31KKHM/lKak/7k6epdNaeBP5N --docker-email=test@test.com
kubectl apply -f sql-data.yaml 
kubectl apply -f services.yaml
kubectl apply -f internalurls.yaml
kubectl create -f conf_local.yaml



tutorial3: load-balance
kubectl get deployments hello-world
kubectl get rkubectl logseplicasets
kubectl describe replicasets
kubectl expose deployment hello-world --type=LoadBalancer --name=my-service
kubectl get service my-service
kubectl describe services my-service
curl $(minikube ip):$port
kubectl delete services my-service
kubectl delete deployment hello-world

tutorial3:redis
kubectl apply -f redis-master-deployment.yaml
kubectl logs $pod_name
kubectl apply -f redis-master-service.yaml
kubectl get service
kubectl apply -f redis-slave-deployment.yaml
kubectl apply -f redis-slave-service.yaml
kubectl apply -f frontend-deployment.yaml
kubectl get pods -l app=guestbook -l tier=frontend
kubectl apply -f frontend-service.yaml 
kubectl get services
curl $(minikube ip):$node_port
kubectl scale deployment frontend --replicas=5
clear up:
kubectl delete deployment -l app=redis
kubectl delete service -l app=redis
kubectl delete deployment -l app=guestbook
kubectl delete service -l app=guestbook



docker:
docker images | grep "v1" | awk '{print $1 ":" $2}' | xargs docker rmi



